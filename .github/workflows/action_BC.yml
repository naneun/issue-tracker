name: GitHub workflow - Java with Gradle

on:
  push:
    branches: [ "BE-deploy" ]

permissions:
  contents: read

jobs:
  job1:
    name: 1. Build jar
    runs-on: ubuntu-latest
    # 기본 경로 지정 https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_iddefaultsrun
    defaults:
      run:
        working-directory: ./backend

    steps:
      #     현재 커밋의 소스파일을 깃헙 서버로 가져온다
      - name: Checkout to current branch
        uses: actions/checkout@v3
      #     깃헙 서버에 JDK11 설치
      - name: Install JDK11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Swap environment variables
        working-directory: ./backend/src/main/resources
        run: |
          echo "${{ secrets.APPLICATION_YML_BC }}" > ./application-prod.yml
          echo "${{ secrets.AUTH_YML_BC }}" > ./auth-prod.yml
          echo "${{ secrets.AWS_YML_BC }}" > ./aws.yml

      #     깃헙에서 테스트가 돌아가게 하려면 어떻게 해야하지? 일단은 안돼서 build 대신 bootJar로 변경
      - name: Build with Gradle
        run: ./gradlew bootJar

      - uses: actions/upload-artifact@v3
        with:
          name: jar_file
          path: ./backend/build/libs


  job2:
    needs: job1
    name: 2. Build & Push Docker Image
    runs-on: ubuntu-latest

    #     https://github.com/marketplace/actions/build-and-push-docker-images
    steps:
      - name: Checkout to current branch
        uses: actions/checkout@v3

      - name: Get artifact
        uses: actions/download-artifact@v3
        with:
          name: jar_file
          path: ./backend/build/libs

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME_BC }}
          password: ${{ secrets.DOCKERHUB_PASSWORD_BC }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: gruzzimo/issue_tracker:latest
          context: ./backend


  job3:
    needs: job2
    name: 3. Deploy to AWS EC2
    runs-on: ubuntu-latest

    steps:

      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PUBLIC_EC2_IP_BC }}
          username: ubuntu
          key: ${{ secrets.PUBLIC_EC2_SSH_KEY_BC }}
          script: |
            CURRENT_PORT=$(curl -s http://localhost/port)
            
            if [[ $CURRENT_PORT == 8080 ]]
            then
            IDLE_PORT=8081
            elif [[ $CURRENT_PORT == 8081 ]]
            then
            IDLE_PORT=8080
            else
            echo "> 기본 포트 8080을 할당합니다."
            IDLE_PORT=8080
            fi
            
            RUNNING_CONTAINER=$(sudo docker ps -a -q)
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME_BC }}/issue_tracker:latest
            CONTAINER_ID=$(sudo docker run -d -p "$IDLE_PORT":"$IDLE_PORT" -e PORT="$IDLE_PORT" -e PROFILE=prod ${{ secrets.DOCKERHUB_USERNAME_BC }}/issue_tracker:latest)
            
            TIMER=10
            while [[ $(sudo docker logs $CONTAINER_ID | grep "Started IssueTrackerApplication") == "" && TIMER -gt 0 ]];
            do
              sleep 5
              echo "Waiting for Spring Boot.."
              let "TIMER--"
            done
            
            if [[ TIMER -eq 0 ]]
            then
            exit 1
            fi
            
            echo "set \$service_url http://127.0.0.1:$IDLE_PORT;" | sudo tee /etc/nginx/conf.d/service-url.inc
            sudo systemctl reload nginx
            
            sudo docker stop $RUNNING_CONTAINER || true
            sudo docker system prune -f
